#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long 'HelpMessage';
use List::MoreUtils qw(firstidx);

my $usage=<<_EOH_;;
------------------------------------------------------------------------------------------
This script is used to DESeq2 results from multiple reads number matrixs based on all genes
save the DESeq2 result of all comparisons
print the DEGs number per comparison in the screen

Usage: 
DESeq --matrix Blenny_read_nb.xls \
--samples coldata_Blenny.txt \
--column Site_1 \
--prefix Blenny

Example:
1. --matrix: Blenny_read_nb.xls
	B61	B62	B63	B64	B65	B66	B67	B68	B69	B71	B72	B73	B74	B75	B76	B77	B78	B79
OG0038649	430	218	222	486	402	612	266	159	278	334	365	190	614	464	346	543	477	490
OG0039547	0	1	0	0	0	0	0	0	0	0	0	3	0	0	0	0	0	0

2. --samples: coldata_Blenny.txt
	Site_1	Site_2	Species
B61	Vn	Vent	Blenny
B62	Vn	Vent	Blenny

																			Kang 2021-8-24
------------------------------------------------------------------------------------------
_EOH_
;

GetOptions(
	'matrix:s', \my $matrix,	# the overall reads number matrix
	'samples:s', \ my $sample_file,	# the sample information
	'column:s', \my $col, # the column selected from the sample information
	'prefix:s', \my $prefix, # the prefix name of output csv file
	'help', \ my $help
	);

if ($help || (! $matrix) && (! $sample_file) || (!$col) || (!$prefix) ) {
	die $usage; # all of these options are mandatory requirements
}

main: {
	my @output;
	&creat_R_header();
	my @groups=&level_column();
	for (my $i = 0; $i < @groups-1; $i++) {
		my $output=&creat_R_common($groups[$i], $groups[$i+1]);
		push @output, $output;
		for (my $j = $i+2; $j < @groups; $j++) {
			my $output=&creat_R_common($groups[$i], $groups[$j]);
			push @output, $output;
		}
	}
	&run_Rscript();
	foreach my $output (@output) {
		&count_DEGs_nb($output);
	}
	exit(0);
}

###################################################################################

sub creat_R_header {
	open DEG, ">DESeq2.R" or die "can not creat DESeq2.R\n";
	print DEG "library(DESeq2)\n";
	print DEG "cts <- read.table(file=\"$matrix\",header=TRUE,row.names = 1)\n";
	print DEG "coldata <- read.table(file=\"$sample_file\")\n";
	print DEG "dds <- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design= ~$col)\n";
	print DEG "dds <- DESeq(dds)\n";
	close DEG;
}

sub creat_R_common {
	my ($comp1, $comp2)=@_;
	open DEG, ">>DESeq2.R" or die "can not creat DESeq2.R\n";
	print DEG "res <- results(dds, contrast=c(\"$col\",\"$comp1\",\"$comp2\"))\n";
	my $output=$prefix."\_$comp1\_$comp2".".csv";
	print DEG "write.csv(as.data.frame(res), file=\"$output\")\n";
	close DEG;
	return ($output);
}

sub level_column {
	open SAMP, "$sample_file" or die "can not open $sample_file\n";
	my $idx;
	my @levels;
	my %hash;
	while (<SAMP>) {
		chomp;
		my @a=split;
		if (/^\s+/) {
			$idx = firstidx { $_ eq $col } @a;
		} else {
			$hash{$a[$idx+1]}++;
		}
	}
	@levels=sort keys %hash;
	return (@levels);
}

sub run_Rscript {
	`R --no-save --no-restore --no-site-file --no-init-file -q < DESeq2.R 1>&2`;
	`rm DESeq2.R`;
}

sub count_DEGs_nb {
	my ($file)=@_;
	my ($name)=$file=~/(.*)\.csv/;
	my $i;
	my $DEG_file=$name.".DEGs.txt";
	open DEG, ">$DEG_file" or die "cannot create $DEG_file\n";
	open FIL, "$file" or die "can not open $file\n";
	while (<FIL>) {
		chomp;
		s/\"//g;
		my @a=split /\,/;
		if (/NA/ || /baseMean/) {
			next;
		} elsif ($a[1]>=10 && abs($a[2])>=0.3 && $a[-1]<=0.05) {
			$i++;
			print DEG "$a[0]\n";
		}
	}
	print "$name\t$i\n";
	close DEG;
	close FIL;
}
